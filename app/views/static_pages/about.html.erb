<div id="center_about">
  <h1>A fully-functional social network made with Ruby on Rails</h1>

  <div id="inner_center_about">
    <h2>About</h2>

    <p>This website is a real social network, with a fully-functioning backend and intuitive user interface modeled on, but not identical to, the design of Facebook. Its source code is available on <%= link_to "Github", url: "https://github.com/johnjmarks4/facebook" %>.</p>

    <%= image_tag "screen_cap1" %>

    <h2>Development Overview</h2>

    <p>My goal was to make Fauxbook as simple as possible, while still evoking the experience of a social network. I started by defining the basic data models and their associations. While fairly simple, the resulting diagram helped me explore the problem space and spot possible roadblocks ahead of time.</p>

    <%= render "diagram" %>

    <p>I diagrammed models for users, posts, "likes", comments, and friends. Note that I deliberately refrained from giving the User model email or password attributes, since I was already planning on installing the Devise gem to handle authentication.</p>

    <%= image_tag "screen_cap2" %>

    <h2>Authentication with Devise</h2>

    <p>Fauxbook uses the <%= link_to "Devise gem", url: "https://github.com/plataformatec/devise" %> to handle user authentication. Though simple to install, using Devise necessitated some workarounds.</p>

    <div class="about_spacer"></div>

    <p>Devise uses the sign-in template as their landing page. This was less than ideal, since I wanted my root route to be the registration page, matching the real Facebook landing page. Because Devise is designed to accommodate all sorts of resources, I had to specify the resource class in the params. Otherwise Devise would throw an error.</p>

    <div class="about_spacer"></div>

    <p>The solution was to use the 'devise_scope' method in my routes file.</p>

    <%= image_tag "screen_cap3" %>

    <p>Capturing the actual Facebook's registration page also required including the sign-in fields in the navbar. This created problems for the same reason as altering the landing page: Devise dynamically generates its sign-in form based on the controller rendering it. This lets it accommodate any resource name, not just a generic "user".</p>

    <%= image_tag "screen_cap4" %>

    <p>This meant I had to include my 'about' page as an action of the user controller. An 'about' action doesn't really make sense for a user object, yet using a static_pages would cause the sign-in form to try to dynamically instantiate a 'static_pages' object, with the result being an error.</p>

    <div class="about_spacer"></div>

    <p>The solution was to make my static_pages controller inherit from DeviseController, thus allowing it to include Devise's build_resource method. I then included my static_pages controller's about action in the 'devise_for' block in my routes file.</p>

    <%= image_tag "screen_cap5" %>

    <p>The final step in getting the landing page right was to tweak my application layout to load an alternative navbar CSS if a user isn't logged in. The result was a landing page closely approximating that of Facebook.</p>

    <%= image_tag "screen_cap6" %>

    <h2>Displaying posts and comments</h2>

    <p>The heart of Facebook is the timeline feature, which allows users to see and comment on recent posts by their friends. What would Fauxbook be without something similar?</p>

    <div class="about_spacer"></div>

    <p>The first step in creating Fauxbook's own timeline was to write a timeline_posts method for the Post model, which would return an ActiveRecord relation containing all posts made by the user's friends in reverse chronological order. Using ERB, I iterated through the relation, rendering each user object as a partial.</p>

    <div class="about_spacer"></div>

    <p>This created something of a problem when I got to adding comments, since I had to make sure comments were matched to their correct post. Since bare HTML doesn't allow for dynamic segments, I used Rails' content_tag method to create the id of each comment div dynamically. On the comment form itself, I nested the content_tag method within the form, then nested the form fields themselves inside that with the concat method.</p>

    <%= image_tag "screen_cap7" %>

    <h2>Login using the Facebook API</h2>

    <p>Another nifty feature I included was the ability to log in to Fauxbook using the real Facebook's developers page.</p>

    <div class="about_spacer"></div>

    <p>The <%= link_to "Omniauth gem", url: "https://github.com/omniauth/omniauth" %> greatly simplified the process of working with Facebook's API. What's more, Devise's Omniauthable method makes integrating Omniauth into the authentication process easy. The only additional code I needed to write was a method that customized the flash message for a successful sign-in and redirected to the after-login page I customized.</p>

    <%= image_tag "screen_cap8" %>
  </div>
  <div class="about_spacer" id="about_end_spacer"></div>
</div>